#include <string>
class Solution {
public:
    // vector<string> split(string& str,char& pattern){
    //     vector<string> res;
    //     string::size_type pos;
    //     str += pattern;
    //     int size = str.size();
    //     for(int i = 0;i < size;i++){
    //         pos = str.find(pattern,i);
    //         if(pos < size){
    //             string s = str.substr(i,pos);
    //             res.push_back(s);
    //             i = pos;
    //         }
    //     }
    //     return res;
    // }
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        int sizeofPath = paths.size();
        if(sizeofPath == 0)
            return {};
        vector<vector<string> > res;
        map<string,vector<string> > m;  //key为文件内容;value为vector,存放文件路径/文件名
        char pattern = ' ';
        for(auto& s : paths){
            int start = s.find(' ');
            string filePath = s.substr(0,start).append(1,'/');
            int leftBracket = s.find('(', start);
            while(leftBracket != string::npos){
                int rightBracket = s.find(')',start);
                string content = s.substr(leftBracket+1,rightBracket-leftBracket-1);
                string fileName = s.substr(start+1, leftBracket-start-1);
                m[content].emplace_back(filePath+fileName);
                start = rightBracket + 1;
                leftBracket = s.find('(', start);
            }
        }
        // for(int i = 0;i < sizeofPath;i++){
        //     vector<string> s = split(paths[i],pattern); //解析输入的字符串，有点复杂
        //     string path = s[0];
        //     string cont = s[1];
        //     itr = m.find(cont);
        //     if(itr != m.end()){
        //         itr->second.push_back(path);
        //     }
        //     else{
        //         m[cont].push_back(path);
        //     }
        // }

        for(auto& s : m){
            int size = s.second.size();
            if(size >= 2){
                res.push_back(s.second);
            }
        }

        return res;
    }
};
